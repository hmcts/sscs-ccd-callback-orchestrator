plugins {
  id 'application'
  id 'pmd'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.0.9.RELEASE'
  id 'uk.gov.hmcts.java' version '0.5.0'
  id 'org.springframework.boot' version '2.3.1.RELEASE'
  id 'com.github.ben-manes.versions' version '0.28.0'
  id 'org.sonarqube' version '3.0'
}

group = 'uk.gov.hmcts.reform'
version = '0.0.1'

sourceCompatibility = 1.8
targetCompatibility = 1.8

sourceSets {
  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/functionalTest/java')
    }
    resources.srcDir file('src/functionalTest/resources')
  }

  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }

  smokeTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/smokeTest/java')
    }
    resources.srcDir file('src/smokeTest/resources')
  }
}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

task functional(type: Test, description: 'Runs the functional tests.', group: 'Verification') {
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
}

task integration(type: Test, description: 'Runs the integration tests.', group: 'Verification') {
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath

  // set your environment variables here
  // environment("APPINSIGHTS_INSTRUMENTATIONKEY", "test-key")
}

task smoke(type: Test) {
  description = "Runs Smoke Tests"
  testClassesDirs = sourceSets.smokeTest.output.classesDirs
  classpath = sourceSets.smokeTest.runtimeClasspath
}

pmd {
  toolVersion = "6.9.0"
  ignoreFailures = true
  sourceSets = [sourceSets.main, sourceSets.test, sourceSets.functionalTest, sourceSets.integrationTest, sourceSets.smokeTest]
  reportsDir = file("$project.buildDir/reports/pmd")
  ruleSetFiles = files("config/pmd/ruleset.xml")
}

jacocoTestReport {
  executionData(test, integration)
  reports {
    xml.enabled = true
    csv.enabled = false
    xml.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
  }
}

project.tasks['sonarqube'].dependsOn test, integration, jacocoTestReport
check.dependsOn integration
checkstyleMain.shouldRunAfter(compileJava)
test.shouldRunAfter(checkstyleTest)
integration.shouldRunAfter(checkstyleIntegrationTest)
integration.shouldRunAfter(test)
functional.shouldRunAfter(checkstyleIntegrationTest)
functional.shouldRunAfter(test)

sonarqube {
  properties {
    property "sonar.projectName", "SSCS - CCD Callback Orchestrator"
    property "sonar.projectKey", "uk.gov.hmcts.reform:sscs-ccd-callback-orchestrator"
    property "sonar.coverage.jacoco.xmlReportPaths", "${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml"
    property "sonar.exclusions", "src/main/java/uk/gov/hmcts/reform/sscs/domain/**," +
      "src/main/java/uk/gov/hmcts/reform/sscs/Application.java," +
      "src/main/java/uk/gov/hmcts/reform/sscs/domain/**," +
      "src/main/java/uk/gov/hmcts/reform/sscs/config/**,"
    property "sonar.pitest.mode", "reuseReport"
    property "sonar.pitest.reportsDirectory", "build/reports/pitest"
  }
}

dependencyUpdates.resolutionStrategy = {
  componentSelection { rules ->
    rules.all { ComponentSelection selection ->
      boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
        selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
      }
      if (rejected) {
        selection.reject('Release candidate')
      }
    }
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  suppressionFile = 'config/owasp/suppressions.xml'
}

repositories {
  mavenLocal()
  maven {
    url "https://dl.bintray.com/hmcts/hmcts-maven"
  }
  maven {
    url 'https://repo.spring.io/libs-milestone'
  }
  jcenter()
  mavenCentral()
}

// it is important to specify logback classic and core packages explicitly as libraries like spring boot
// enforces it's own (older) version which is not recommended.
def versions = [
  junit           : '5.3.2',
  reformLogging   : '5.0.1',
  springfoxSwagger: '2.9.2',
  feignVersion : '10.1.0'
]

dependencyManagement {
  dependencies {
    dependency group: 'commons-beanutils', name: 'commons-beanutils', version: '1.9.4'
    dependency group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.13.3'
    dependency group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: '2.13.3'

        // solves CVE-2019-12086
    // remove once spring manager incorporates this changes
    dependencySet(group: 'com.fasterxml.jackson.core', version: '2.11.0') {
      entry 'jackson-core'
      entry 'jackson-databind'
    }

    // CVE-2019-16869 - brought in by qpid-jms-client
    dependencySet(group: 'io.netty', version: '4.1.50.Final') {
      entry 'netty-handler'
      entry 'netty-transport-native-epoll'
      entry 'netty-transport-native-kqueue'
      entry 'netty-codec-http'
      entry 'netty-codec'
      entry 'netty-transport-native-unix-common'
      entry 'netty-transport'
      entry 'netty-buffer'
      entry 'netty-resolver'
      entry 'netty-common'
    }

    // CVE-2019-0232, CVE-2019-0199 - command line injections on windows
    dependencySet(group: 'org.apache.tomcat.embed', version: '9.0.36') {
      entry 'tomcat-embed-core'
      entry 'tomcat-embed-el'
      entry 'tomcat-embed-websocket'
    }
  }
}


dependencies {
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-web'
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-json'
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-validation'

  compile group: 'org.springframework', name: 'spring-jms'

  compile group: 'org.springframework.retry', name: 'spring-retry', version: '1.3.0'
  compile group: 'org.springframework.cloud', name: 'spring-cloud-starter-netflix-hystrix', version: '2.2.3.RELEASE'

  compile group: 'org.apache.qpid', name: 'qpid-jms-client', version: '0.52.0'
  compile group: 'io.github.openfeign', name: 'feign-jackson', version: versions.feignVersion
  compile group: 'io.springfox', name: 'springfox-swagger2', version: versions.springfoxSwagger

  compile group: 'uk.gov.hmcts.reform', name: 'properties-volume-spring-boot-starter', version:'0.1.0'
  compile group: 'uk.gov.hmcts.reform', name: 'java-logging', version: versions.reformLogging
  compile group: 'uk.gov.hmcts.reform', name: 'java-logging-httpcomponents', version: versions.reformLogging
  compile group: 'uk.gov.hmcts.reform', name: 'java-logging-appinsights', version: versions.reformLogging
  compile group: 'uk.gov.hmcts.reform', name: 'service-auth-provider-client', version: '3.1.2'

  compile group: 'com.microsoft.azure', name: 'applicationinsights-logging-logback', version: '2.6.1'
  compile group: 'com.microsoft.azure', name: 'applicationinsights-spring-boot-starter', version: '2.6.1'

  compileOnly 'org.projectlombok:lombok:1.18.12'
  annotationProcessor "org.projectlombok:lombok:1.18.12"

  testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: versions.junit
  testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: versions.junit
  testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: versions.junit

  testCompile group: 'uk.gov.hmcts.reform', name: 'sscs-common', version:  '3.3.0'
  testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test'
  testCompile group: 'org.mockito', name: 'mockito-core', version: '3.3.3'
  testCompile 'pl.pragmatists:JUnitParams:1.1.1'
  testCompile group: 'org.apache.qpid', name: 'qpid-broker-core', version: '8.0.0'
  testCompile group: 'org.apache.qpid', name: 'qpid-broker-plugins-amqp-1-0-protocol', version: '8.0.0'
  testCompile group: 'org.apache.qpid', name: 'qpid-broker-plugins-memory-store', version: '8.0.0'


  integrationTestCompile sourceSets.main.runtimeClasspath
  integrationTestCompile sourceSets.test.runtimeClasspath

  functionalTestCompile sourceSets.main.runtimeClasspath

  functionalTestCompile sourceSets.test.runtimeClasspath

  smokeTestCompile sourceSets.main.runtimeClasspath
  smokeTestCompile sourceSets.test.runtimeClasspath

}

// this is required to force Java running on the Azure Windows Server OS into using
// UTF-8 as the default character set instead of windows-1252 which causes issues
applicationDefaultJvmArgs = ["-Dfile.encoding=UTF-8"]

run {
  def debug = System.getProperty("debug")
  if (debug == 'true') {
    jvmArgs = ['-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005']
  }
}

mainClassName = 'uk.gov.hmcts.reform.sscs.Application'

bootJar {
  archiveName = 'sscs-ccd-callback-orchestrator.jar'

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}
